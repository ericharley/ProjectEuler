def binary_search(a, x, lo=0, hi=None):
    if hi is None:
        hi = len(a)
    while lo < hi:
        mid = (lo+hi)//2
        midval = a[mid]
        if midval < x:
            lo = mid+1
        elif midval > x: 
            hi = mid
        else:
            return True
    return False

def primes(n): 
	if n==2: return [2]
	elif n<2: return []
	s=range(3,n+1,2)
	mroot = n ** 0.5
	half=(n+1)/2-1
	i=0
	m=3
	while m <= mroot:
		if s[i]:
			j=(m*m-3)/2
			s[j]=0
			while j<half:
				s[j]=0
				j+=m
		i=i+1
		m=2*i+3
	return [2]+[x for x in s if x]

p = primes(1000000)

max_length = 1
for i in range(len(p)):
  sp = 0
  for j in range(i+1,len(p)):
    sp = sp + p[j]
    if (j-i>max_length) & (sp % 2 == 1) & ( binary_search(p, sp, i) ):
        print max_length
        max_length = j-i
        max_i = i
        max_j = j

print [max_length, max_i, max_j, p[max_i], p[max_j-1], sum(p[max_i:max_j])]

(sp in p):
